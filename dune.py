#!/usr/bin/env python3
"""
G≈Ç√≥wny skrypt uruchamiajƒÖcy procesor danych z automatycznym wykrywaniem bibliotek.
"""

import os
import sys
from pathlib import Path
from loguru import logger
from dotenv import load_dotenv

# Dodaj src do PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent / "src"))

from dune.processor_engine import ProcessorEngine
from dune.llm_analyzer import LLMAnalyzer


def main():
    """G≈Ç√≥wna funkcja uruchamiajƒÖca system."""

    # Za≈Çaduj zmienne ≈õrodowiskowe
    load_dotenv()

    # Konfiguruj logowanie
    logger.add("logs/processor.log", rotation="1 MB")
    logger.info("Uruchamianie procesora danych...")

    # Inicjalizuj komponenty
    llm_analyzer = LLMAnalyzer(
        base_url=os.getenv("OLLAMA_BASE_URL", "http://localhost:11434"),
        model=os.getenv("OLLAMA_MODEL", "mistral:7b")
    )

    processor_engine = ProcessorEngine(llm_analyzer)

    # Przyk≈Çadowe zadanie w jƒôzyku naturalnym
    natural_request = """
    Pobierz wszystkie wiadomo≈õci email ze skrzynki IMAP i zapisz je w folderach 
    uporzƒÖdkowanych wed≈Çug roku i miesiƒÖca w formacie skrzynka/rok.miesiƒÖc/*.eml.
    Dane logowania do skrzynki znajdziesz w pliku .env.
    """

    logger.info(f"Przetwarzanie ≈ºƒÖdania: {natural_request}")

    try:
        # Przeanalizuj ≈ºƒÖdanie i wykonaj
        result = processor_engine.process_natural_request(natural_request)

        logger.success(f"Zadanie zako≈Ñczone pomy≈õlnie: {result}")
        print(f"‚úÖ Zadanie zako≈Ñczone pomy≈õlnie!")
        print(f"üìä Wynik: {result}")

    except Exception as e:
        logger.error(f"B≈ÇƒÖd podczas przetwarzania: {e}")
        print(f"‚ùå B≈ÇƒÖd: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()